<?xml version='1.0' encoding='UTF-8'?>
<section version="5.0"
    xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd"
    xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xl="http://www.w3.org/1999/xlink"
    xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xhtml="http://www.w3.org/1999/xhtml"
    xmlns:svg="http://www.w3.org/2000/svg" xmlns:mth="http://www.w3.org/1998/Math/MathML"
    xmlns:db="http://docbook.org/ns/docbook" xml:id="working-with-textpattern">
    <title>Working with TextPattern</title>
    <para>TextPattern was introduced in DHIS2 version 2.29, as a way of defining a pattern that
        includes variables, generated values and raw text, which then could be generated into a text
        value. The current use-case for TextPattern is automatically generated attributes for
        tracked entities, where you want to generate for example unique ids based on a specific
        pattern.</para>
    <para>This guide will cover both basic and advanced topics for working with TextPattern, but is
        mainly focused on how you can define TextPatterns and which limitations and caveats
        exists.</para>
    <section>
        <title>TextPattern syntax</title>
        <para>A TextPattern is a sequence of <emphasis>segments</emphasis>, joined together by the
            "+" character. A segment has a specific notation and in most cases a parameter
                <emphasis>format</emphasis>, which allows for further manipulation of the
            value.</para>
        <table frame="all">
            <title>TextPattern segments</title>
            <tgroup cols="4">
                <colspec colname="c1" colnum="1" colwidth="1.67*"/>
                <colspec colname="c2" colnum="2" colwidth="3.02*"/>
                <colspec colname="c3" colnum="3" colwidth="1*"/>
                <colspec colname="c4" colnum="4" colwidth="2.53*"/>
                <thead>
                    <row>
                        <entry>Segment notation</entry>
                        <entry>Description</entry>
                        <entry>Paramenter (format)</entry>
                        <entry>Example (segment → input value → result)</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>"Plain text"</entry>
                        <entry>The plain text segment will remain unchanged in all generated values.
                            This special segment is defined by wrapping text between two double
                            quotes. If your pattern should include separation symbols like a dash,
                            you should use this "-".<para>The plain text segment also allows for
                                placeholder text. That means you can specify that parts of the plain
                                text segment should be any of a set of characters. Currently there
                                are 4 supported special characters you can use:<itemizedlist>
                                    <listitem>
                                        <para>\d (0-9)</para>
                                    </listitem>
                                    <listitem>
                                        <para>\x (a-z)</para>
                                    </listitem>
                                    <listitem>
                                        <para>\X (A-Z)</para>
                                    </listitem>
                                    <listitem>
                                        <para>\w (a-zA-Z0-9)</para>
                                    </listitem>
                                </itemizedlist></para></entry>
                        <entry>None</entry>
                        <entry>"Hello world" → None → Hello world<para>"Hello \x\x\x" → "Hello you"
                                → Hello you</para><para>"\d\d\d" → "123" → 123</para></entry>
                    </row>
                    <row>
                        <entry>CURRENT_DATE(format)</entry>
                        <entry>Current date segment will be generated by the server at the time of
                            generation. This is useful if you want your patterns to have a
                            time-constraint that is disconnected from the context. You should not
                            use this if you need to control which date is injected into the
                            pattern.</entry>
                        <entry>Date format</entry>
                        <entry>CURRENT_DATE(yyyy) → 01-01-2018 → 2018</entry>
                    </row>
                    <row>
                        <entry>ORG_UNIT_CODE(format)</entry>
                        <entry>This segment represents the organisation unit code associated with
                            the generation.</entry>
                        <entry>Text format</entry>
                        <entry>ORG_UNIT_CODE(…) → OSLO → OSL</entry>
                    </row>
                    <row>
                        <entry>RANDOM(format)</entry>
                        <entry>Random segments will be replaced by a value randomly generated by the
                            server based on the format. Generated segments, like Random, bases its
                            uniqueness on the rest of the pattern. That means a random value can
                            appear twice, as long as the rest of the pattern is different, which
                            means the generated text as a whole will be unique.</entry>
                        <entry>Generation format</entry>
                        <entry>RANDOM(X####) → None → A1234</entry>
                    </row>
                    <row>
                        <entry>SEQUENTIAL(format)</entry>
                        <entry>Sequential segments will be replaced by a number, based on a counting
                            value on the server. Sequential segments will start at the value 1, and
                            for each generated value count up until no more values are available,
                            based on the format. Like Random segments, uniqueness is based on the
                            rest of the pattern, so each possible version of the pattern will have
                            it's own sequential counter starting from 1.</entry>
                        <entry>Generation format</entry>
                        <entry>"A"+SEQUENTIAL(###) → None → A001<para>"A"-SEQUENTIAL(###) → None →
                                A002</para><para>"B"-SEQUENTIAL(###) → None →
                                B001</para><para>"B"-SEQUENTIAL(###) → None → B002</para></entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
        <para>Most segments has a paramter <emphasis>format</emphasis>, except for the plain text
            segment. The following table lists the available formats, how they are used and example
            notations using them.</para>
        <table frame="all">
            <title>Parameter formats</title>
            <tgroup cols="3">
                <colspec colname="c1" colnum="1" colwidth="1*"/>
                <colspec colname="c2" colnum="2" colwidth="3.93*"/>
                <colspec colname="c3" colnum="3" colwidth="2.57*"/>
                <thead>
                    <row>
                        <entry>Format</entry>
                        <entry>Description</entry>
                        <entry>Example</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>Date format</entry>
                        <entry>This format is based directly on the java SimpleDateFormat, which
                            means any pattern valid for SimpleDateFormat, will be valid as a date
                            format in TextPattern</entry>
                        <entry>CURRENT_DATE(dd-MM-yyyy) → 31-12-2018<para>CURRENT_DATE(MM-yyyy) →
                                12-2018</para></entry>
                    </row>
                    <row>
                        <entry>Text format</entry>
                        <entry>The text format allows for some basic text manipulation. Leaving the
                            format empty will return the value unmodified, but using "^", "." and
                            "$", you can modify the value before it is returned. Each "." represents
                            a character, while "^" represents the start of the text nd "$"
                            represents the end. When using formats, the input value must be at least
                            the same length as the format.</entry>
                        <entry>ORG_UNIT_CODE(….) → OSLO<para>ORG_UNIT_CODE(..) →
                                OS</para><para>ORG_UNIT_CODE(..$) →
                                LO</para><para>ORG_UNIT_CODE(^...$) → OSLO</para><para>^.…$ will
                                require the input value to be exactly 4 characters.</para></entry>
                    </row>
                    <row>
                        <entry>Generation format</entry>
                        <entry>The generation format accepts a combination of one or more of he
                            following characters: "#", "X", "x" and "*". They respectively represent
                            a number(0-9), an uppercase letter (A-Z), a lowercase letter(a-z) or any
                            of the above(0-9,a-z,A-Z). The SEQUENTIAL segment only accepts "#",
                            since it will only generate numbers. The number of characters in the
                            format decides the size of the value generated. Using just one "#" will
                            in other words only allow for 10 values (0-9), while "###" will allow
                            for 1000 values (000-999). SEQUENTIAL generated values have leading
                            zeroes, so the length of the generated value will always match the
                            format length. </entry>
                        <entry>RANDOM(X###) → A123<para>RANDOM(****) →
                                1AbC</para><para>SEQUENTIAL(###) →
                                001</para><para>SEQUENTIAL(######) → 000001</para></entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
        <para>A few important things to note regarding the formats:<itemizedlist>
                <listitem>
                    <para>Date format is very versatile, but be aware of which date or time
                        components you are using. Using components smaller than a day (For example
                        hours or seconds) is not reccomended, even though available.</para>
                </listitem>
                <listitem>
                    <para>Text format allows for marking both the start and end of the input value,
                        but "^..." and "…" will in reality give exactly the same results. The only
                        time you would want to use "^" is when you want to enforce the length of the
                        input value. For example, "^....$" will accept OSLO, since its 4 characters
                        between the start and end, but PARIS will be rejected, since it has 5
                        characters.</para>
                </listitem>
                <listitem>
                    <para>When text format is used for unique values, like organisation unit code,
                        make sure that the format doesnt break the uniqueness. (Example:
                        ORG_UNIT_CODE(..) for "PARIS" and "PANAMA CITY" would both return PA, which
                        means these two organisation units would in reality share generated
                        values)</para>
                </listitem>
                <listitem>
                    <para>Generation format is the primary way to understanding the capacity of your
                        pattern. Make sure the format is long enough to cover more values than you
                        need.</para>
                </listitem>
            </itemizedlist></para>
        <para>To finish off the syntax section of the tutorial, here is a couple of example
            TextPattern:<screen>ORG_UNIT_CODE(…) + "-" + CURRENT_DATE(yyyyww) + "-" + SEQUENTIAL(#####)</screen></para>
        <para>This pattern will have 99999 possible values (based on SEQUENTIAL. 00000 is never used
            since we start at 1). In addition, the remaining pattern will change for each different
            organisation unit generating values (ORG_UNIT_CODE) and for each week
            (CURRENT_DATE(yyyyww) represents year and week). That effectively means every new week,
            each organisation unit will have 99999 new values they can
            use.<screen>"ABC_" + RANDOM(****)</screen></para>
        <para>The plain text segment of this pattern, will make no difference in the total capacity
            of the pattern, however the generated segment (RANDOM) will allow for 14776336 possible
            values. The reason for this is that * can be any one character of the 62 characters
            available (0-9, a-z, A-Z). You can read more about understanding pattern capacity
            further down in the tutorial.</para>
    </section>
    <section>
        <title>Designing TextPattern for generating ids</title>
        <para>One use-case for TextPattern is to generate unique ids. In this section we will
            present guidelines and common issues related to desining TextPatterns used for
            ids.</para>
        <para>An id should never contain sensitive information, or information that in combination
            can identify an individual. TextPattern does not currently support segments that uses
            these kind of values, but might do so in the future. </para>
        <para>The following list highlights some of the TextPattern specific restrictions you need
            to consider when designing a TextPattern for ids:<itemizedlist>
                <listitem>
                    <para>Make sure the capacity (number of possible values) of the TextPattern
                        covers your use-case. It's better to have more values than needed than less.
                        Tracked entity attributes using TextPattern will require that a single
                        generated segment is present in the TextPattern.</para>
                </listitem>
                <listitem>
                    <para>A TextPattern is unique in the entire system, but only for the object
                        using it. In other words, if you have a single tracked entity attribute with
                        TextPattern, used by multiple Tracked entities (Not to be mistaken for
                        tracked entity instances), all values generated will be shared between all
                        traced entities using the attribute. This also means that if you have two
                        tracked entity attributes with the same TextPattern syntax, each attribute
                        will be able to generate the same value as the other, since uniqueness is
                        based on the attribute.</para>
                </listitem>
            </itemizedlist></para>
        <para>
            <itemizedlist>
                <listitem>
                    <para>SEQUENTIAL segments are in the implementation numbers starting from 1,
                        increasing by 1 for each value, sequentially until no more values are
                        available. However, in reality you will most likely end up with gaps when
                        users generate and reserve values that is never used, or if a user sends in
                        a value where the SEQUENTIAL segment has a higher value than recorded on the
                        server.</para>
                </listitem>
                <listitem>
                    <para>The current implementation relies on the user-client to send in the values
                        contained in the TextPattern when storing a new value. That means generating
                        a correct id is depending on the user, and user-client, to provide the
                        correct data.</para>
                </listitem>
            </itemizedlist>
        </para>
    </section>
    <section>
        <title>Understanding TextPattern capacity</title>
        <para>The most important thing to keep in mind when designing a TextPattern, is the capacity
            - that means the total number of potential values a TextPattern can yield.</para>
        <para>With the current implementation of TextPattern, there are three main factors that
            decides the capacity:<orderedlist>
                <listitem>
                    <para>Capacity of the generated segment in the TextPattern</para>
                </listitem>
                <listitem>
                    <para>The presence of a CURRENT_DATE segment</para>
                </listitem>
                <listitem>
                    <para>The presence of a ORG_UNIT_CODE segment</para>
                </listitem>
            </orderedlist></para>
        <para>The presence of a date segment (like CURRENT_DATE) will effectively reset the capacity
            each time the segment changes. Depending on the date format, it can change anywhere to
            yearly to daily. <emphasis role="bold">Important: If your date format don't contain a
                year, the pattern will resolve to the same value every year.</emphasis> That means
            values will already be used. For example, if your TextPattern looks like
            this:<screen>CURRENT_DATE(ww) + "-" + RANDOM(#)</screen></para>
        <para>This pattern will give you up to 10 unique values for each week, but after 1 year,
            CURRENT_DATE(ww) will be the same as last year, and you will have no new values
            available. If you use "yyyy-ww" instead, it will be unique for every year, every
            week.</para>
        <para>Organisation unit codes will make your values unique for each different organisation
            unit, which means if you have a text pattern like
            this:<screen>ORG_UNIT_CODE() + "-" + RANDOM(#)</screen></para>
        <para>This pattern will give you 10 unique values for each different organisation
            unit.</para>
        <section>
            <title>Calculating capacity for generated segments</title>
            <para>Understanding how to calculate the capacity of a TextPattern is critical when
                designing TextPatterns. The generated segments will be the main component of any
                TextPattern in terms of capacity, then increased based on the presence of
                ORG_UNIT_CODE or CURRENT_DATE.</para>
            <para>Let's start with SEQUENTIAL segments. Each "#" in the format represents a number
                between 0 and 9. To calculate the total capacity, you multiply the number of
                possible values for each "#". Since it's always 10 (0-9) the math is quite straight
                forward:<screen>SEQUENTIAL(#) = 10 = 10
SEQUENTIAL(###) = 10 * 10 * 10 = 1000
SEQUENTIAL(#####) = 10 * 10 * 10 * 10 * 10 = 100000</screen></para>
            <para>Since SEQUENTIAL counters on the server start at 1 and not 0, the actual capacity
                is 999, but that's insignificant in most cases.</para>
            <para>As soon as we involve RANDOM, the calculation becomes a bit more complicated.
                Similar to SEQUENTIAL, a "#" has 10 possible values, in addition we have "X" and "x"
                with 26 possible values each, as well as "*" which can be any of the previous, which
                means 62 (10+26+26) possible values.</para>
            <para>To calculate the capacity, you need to take each character in your format and
                replace with the number of possible values, then multiply them all together like we
                did for
                SEQUENTIAL:<screen>RANDOM(#) = 10 = 10
RANDOM(X) = 26 = 26
RANDOM(*) = 62 = 62

RANDOM(X##) = 26 * 10 * 10 = 2600
RANDOM(XXxx) = 26 * 26 * 26 * 26 = 456976

RANDOM(***) = 62 * 62 * 62 = 238328</screen></para>
            <para>As you can see, the math gets a bit more complicated when, but by following this
                recipe you can see the number of potential values.</para>
        </section>
    </section>
    <section>
        <title>Random segments and why you should avoid it</title>
        <para>There is a hidden cost of using the random segment in TextPattern in the long run, but
            that does not mean you should never use it. This section will highlight the problems of
            using the random segment and suggest when it might be more appropriate to use it.</para>
        <para>This section is motivated by an issue with the previous generation strategy, where you
            only had random generation. After while, instances using this feature would actually be
            unable to generate and reserve new values, since it was taking to long to find available
            values. This section looks at some of the problems with random generation that created
            this situation.</para>
        <section>
            <title>Generating random values</title>
            <para>Before using the RANDOM segment in your TextPattern, you should consider the
                following problems connected to the use of RANDOM:<itemizedlist>
                    <listitem>
                        <para>Generating values from a TextPattern with a RANDOM segment will be
                            more complex than other TextPatterns</para>
                    </listitem>
                </itemizedlist></para>
        </section>
    </section>
    <section>
        <title>Data entry for TextPattern based metadata</title>
        <para>As previously mentioned, the only metadata currently supporting TextPattern is the
            tracked entity attributes. In this section, we will describe the different ways data
            entry for TextPattern works, especially for tracked entity attributes.</para>
        <section>
            <title>Validation of values using TextPattern</title>
            <para>By default, all values sent to the server for metadata using TextPattern, will be
                validated. Validation can be skipped if needed, but you should always validate input
                under normal circumstances. The validation will be based on the TextPattern you have
                defined and will be as strict as possible:<itemizedlist>
                    <listitem>
                        <para>Date segments must match the same format as specified in the segment
                            parameter</para>
                    </listitem>
                    <listitem>
                        <para>Plain text segments must match exactly</para>
                    </listitem>
                    <listitem>
                        <para>Text segments values must be at least as long as the format string. If
                            both "^" and "$" is present, the value must match the exact
                            length.</para>
                    </listitem>
                    <listitem>
                        <para>Generated segment values must match the format exactly, character by
                            character.</para>
                    </listitem>
                </itemizedlist></para>
            <para>When using the server to first generate and reserve values, the server will modify
                the values used in the TextPattern before injecting them, meaning you will always
                get a valid value when generating it on the server.</para>
            <para>A final exception to TextPattern validation is made for a special case: If you
                change a TextPattern after reserving values for the original pattern, values sent to
                the server that are invalid according to the new TextPattern, will still be accepted
                if it was already reserved.</para>
        </section>
        <section>
            <title>Different data entry flows for TextPattern</title>
            <para>There is currently 2 ways a client can store values for TextPattern metadata:<orderedlist>
                    <listitem>
                        <para>Generating and reserving values (Apps should do this for you)</para>
                    </listitem>
                    <listitem>
                        <para>Storing a custom value</para>
                    </listitem>
                </orderedlist></para>
            <para>The preferred way, is to generate and reserve the needed values (The number of
                values generated and reserved is handled by the app). That means each time you are
                seeing and storing a value, it has been generated and reserved by the server, and
                will be valid.</para>
            <para>The other way might be useful in specific cases. The user will supply the value
                themselves and as long as the value supplied is valid for the TextPattern, they can
                put anything they want. The caveat of doing it this way, is that you might use
                values that was reserved by someone else and if you have a SEQUENTIAL segment, the
                counter will not be updated.</para>
        </section>
    </section>
</section>
